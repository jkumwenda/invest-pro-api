# Generated by Django 3.2 on 2022-04-30 07:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessRight',
            fields=[
                ('access_right_id', models.AutoField(primary_key=True, serialize=False)),
                ('access_right', models.CharField(max_length=255, unique=True)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'access_right',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AnalysisParameter',
            fields=[
                ('analysis_parameter_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'analysis_parameter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AnswerType',
            fields=[
                ('answer_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('answer_type', models.TextField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'answer_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Instance',
            fields=[
                ('instance_id', models.AutoField(primary_key=True, serialize=False)),
                ('organisation_name', models.TextField()),
                ('postal_address', models.TextField()),
                ('email_address', models.TextField(blank=True, null=True)),
                ('folder_fs_path', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'instance',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('parameter_id', models.AutoField(primary_key=True, serialize=False)),
                ('parameter', models.TextField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('answer_type_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.answertype')),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
            ],
            options={
                'db_table': 'parameter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
            ],
            options={
                'db_table': 'role',
                'managed': True,
                'unique_together': {('role', 'instance_id')},
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('user_log_id', models.AutoField(primary_key=True, serialize=False)),
                ('log', models.TextField()),
                ('tag', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_log',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('sector_id', models.AutoField(primary_key=True, serialize=False)),
                ('sector', models.TextField(max_length=80)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
            ],
            options={
                'db_table': 'sector',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('profile_id', models.AutoField(primary_key=True, serialize=False)),
                ('phone_number', models.BigIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ParameterGroup',
            fields=[
                ('parameter_group_id', models.AutoField(primary_key=True, serialize=False)),
                ('parameter_group', models.TextField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
                ('parameter_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.parameter')),
            ],
            options={
                'db_table': 'parameter_group',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ParameterCategory',
            fields=[
                ('parameter_category_id', models.AutoField(primary_key=True, serialize=False)),
                ('parameter_category', models.TextField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
            ],
            options={
                'db_table': 'parameter_category',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='parameter',
            name='parameter_category_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameter_categories', to='api.parametercategory'),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('company_id', models.AutoField(primary_key=True, serialize=False)),
                ('company', models.TextField(max_length=80)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
                ('sector_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.sector')),
            ],
            options={
                'db_table': 'company',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AnswerValue',
            fields=[
                ('answer_value_id', models.AutoField(primary_key=True, serialize=False)),
                ('answer_value', models.CharField(max_length=100)),
                ('value', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('answer_type_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.answertype')),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
            ],
            options={
                'db_table': 'answer_value',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='answertype',
            name='instance_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance'),
        ),
        migrations.CreateModel(
            name='AnalysisValue',
            fields=[
                ('analysis_value_id', models.AutoField(primary_key=True, serialize=False)),
                ('value', models.IntegerField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('analysis_parameter_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.analysisparameter')),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
            ],
            options={
                'db_table': 'analysis_value',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AnalysisPortfolioCategory',
            fields=[
                ('analysis_portfolio_category_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
                ('parameter_category_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.parametercategory')),
            ],
            options={
                'db_table': 'analysis_portfolio_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AnalysisPortfolio',
            fields=[
                ('analysis_portfolio_id', models.AutoField(primary_key=True, serialize=False)),
                ('analysis_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.company')),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
            ],
            options={
                'db_table': 'analysis_portfolio',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='analysisparameter',
            name='analysis_portfolio_category_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.analysisportfoliocategory'),
        ),
        migrations.AddField(
            model_name='analysisparameter',
            name='instance_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance'),
        ),
        migrations.AddField(
            model_name='analysisparameter',
            name='parameter_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.parameter'),
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('user_role_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
                ('role_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.role')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_role',
                'managed': True,
                'unique_together': {('user_id', 'role_id', 'instance_id')},
            },
        ),
        migrations.CreateModel(
            name='RoleAccessRight',
            fields=[
                ('role_access_right_id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('access_right_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.accessright')),
                ('instance_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.instance')),
                ('role_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.role')),
            ],
            options={
                'db_table': 'role_access_right',
                'managed': True,
                'unique_together': {('role_id', 'access_right_id', 'instance_id')},
            },
        ),
    ]
